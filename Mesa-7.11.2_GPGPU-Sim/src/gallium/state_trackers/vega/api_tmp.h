/* This file is automatically generated by mapi_abi.py.  Do not modify. */

void VG_API_ENTRY vegaAppendPath(VGPath dstPath, VGPath srcPath) VG_API_EXIT;
void VG_API_ENTRY vegaAppendPathData(VGPath dstPath, VGint numSegments, const VGubyte *pathSegments, const void *pathData) VG_API_EXIT;
VGImage VG_API_ENTRY vegaChildImage(VGImage parent, VGint x, VGint y, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaClear(VGint x, VGint y, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaClearImage(VGImage image, VGint x, VGint y, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaClearPath(VGPath path, VGbitfield capabilities) VG_API_EXIT;
void VG_API_ENTRY vegaColorMatrix(VGImage dst, VGImage src, const VGfloat *matrix) VG_API_EXIT;
void VG_API_ENTRY vegaConvolve(VGImage dst, VGImage src, VGint kernelWidth, VGint kernelHeight, VGint shiftX, VGint shiftY, const VGshort *kernel, VGfloat scale, VGfloat bias, VGTilingMode tilingMode) VG_API_EXIT;
void VG_API_ENTRY vegaCopyImage(VGImage dst, VGint dx, VGint dy, VGImage src, VGint sx, VGint sy, VGint width, VGint height, VGboolean dither) VG_API_EXIT;
void VG_API_ENTRY vegaCopyPixels(VGint dx, VGint dy, VGint sx, VGint sy, VGint width, VGint height) VG_API_EXIT;
VGImage VG_API_ENTRY vegaCreateImage(VGImageFormat format, VGint width, VGint height, VGbitfield allowedQuality) VG_API_EXIT;
VGPaint VG_API_ENTRY vegaCreatePaint(void) VG_API_EXIT;
VGPath VG_API_ENTRY vegaCreatePath(VGint pathFormat, VGPathDatatype datatype, VGfloat scale, VGfloat bias, VGint segmentCapacityHint, VGint coordCapacityHint, VGbitfield capabilities) VG_API_EXIT;
void VG_API_ENTRY vegaDestroyImage(VGImage image) VG_API_EXIT;
void VG_API_ENTRY vegaDestroyPaint(VGPaint paint) VG_API_EXIT;
void VG_API_ENTRY vegaDestroyPath(VGPath path) VG_API_EXIT;
void VG_API_ENTRY vegaDrawImage(VGImage image) VG_API_EXIT;
void VG_API_ENTRY vegaDrawPath(VGPath path, VGbitfield paintModes) VG_API_EXIT;
void VG_API_ENTRY vegaFinish(void) VG_API_EXIT;
void VG_API_ENTRY vegaFlush(void) VG_API_EXIT;
void VG_API_ENTRY vegaGaussianBlur(VGImage dst, VGImage src, VGfloat stdDeviationX, VGfloat stdDeviationY, VGTilingMode tilingMode) VG_API_EXIT;
VGuint VG_API_ENTRY vegaGetColor(VGPaint paint) VG_API_EXIT;
VGErrorCode VG_API_ENTRY vegaGetError(void) VG_API_EXIT;
void VG_API_ENTRY vegaGetImageSubData(VGImage image, void *data, VGint dataStride, VGImageFormat dataFormat, VGint x, VGint y, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaGetMatrix(VGfloat *m) VG_API_EXIT;
VGPaint VG_API_ENTRY vegaGetPaint(VGPaintMode paintMode) VG_API_EXIT;
VGint VG_API_ENTRY vegaGetParameterVectorSize(VGHandle object, VGint paramType) VG_API_EXIT;
VGfloat VG_API_ENTRY vegaGetParameterf(VGHandle object, VGint paramType) VG_API_EXIT;
void VG_API_ENTRY vegaGetParameterfv(VGHandle object, VGint paramType, VGint count, VGfloat *values) VG_API_EXIT;
VGint VG_API_ENTRY vegaGetParameteri(VGHandle object, VGint paramType) VG_API_EXIT;
void VG_API_ENTRY vegaGetParameteriv(VGHandle object, VGint paramType, VGint count, VGint *values) VG_API_EXIT;
VGImage VG_API_ENTRY vegaGetParent(VGImage image) VG_API_EXIT;
VGbitfield VG_API_ENTRY vegaGetPathCapabilities(VGPath path) VG_API_EXIT;
void VG_API_ENTRY vegaGetPixels(VGImage dst, VGint dx, VGint dy, VGint sx, VGint sy, VGint width, VGint height) VG_API_EXIT;
const VGubyte * VG_API_ENTRY vegaGetString(VGStringID name) VG_API_EXIT;
VGint VG_API_ENTRY vegaGetVectorSize(VGParamType type) VG_API_EXIT;
VGfloat VG_API_ENTRY vegaGetf(VGParamType type) VG_API_EXIT;
void VG_API_ENTRY vegaGetfv(VGParamType type, VGint count, VGfloat *values) VG_API_EXIT;
VGint VG_API_ENTRY vegaGeti(VGParamType type) VG_API_EXIT;
void VG_API_ENTRY vegaGetiv(VGParamType type, VGint count, VGint *values) VG_API_EXIT;
VGHardwareQueryResult VG_API_ENTRY vegaHardwareQuery(VGHardwareQueryType key, VGint setting) VG_API_EXIT;
void VG_API_ENTRY vegaImageSubData(VGImage image, const void *data, VGint dataStride, VGImageFormat dataFormat, VGint x, VGint y, VGint width, VGint height) VG_API_EXIT;
VGboolean VG_API_ENTRY vegaInterpolatePath(VGPath dstPath, VGPath startPath, VGPath endPath, VGfloat amount) VG_API_EXIT;
void VG_API_ENTRY vegaLoadIdentity(void) VG_API_EXIT;
void VG_API_ENTRY vegaLoadMatrix(const VGfloat *m) VG_API_EXIT;
void VG_API_ENTRY vegaLookup(VGImage dst, VGImage src, const VGubyte *redLUT, const VGubyte *greenLUT, const VGubyte *blueLUT, const VGubyte *alphaLUT, VGboolean outputLinear, VGboolean outputPremultiplied) VG_API_EXIT;
void VG_API_ENTRY vegaLookupSingle(VGImage dst, VGImage src, const VGuint *lookupTable, VGImageChannel sourceChannel, VGboolean outputLinear, VGboolean outputPremultiplied) VG_API_EXIT;
void VG_API_ENTRY vegaMask(VGHandle mask, VGMaskOperation operation, VGint x, VGint y, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaModifyPathCoords(VGPath dstPath, VGint startIndex, VGint numSegments, const void *pathData) VG_API_EXIT;
void VG_API_ENTRY vegaMultMatrix(const VGfloat *m) VG_API_EXIT;
void VG_API_ENTRY vegaPaintPattern(VGPaint paint, VGImage pattern) VG_API_EXIT;
void VG_API_ENTRY vegaPathBounds(VGPath path, VGfloat *minX, VGfloat *minY, VGfloat *width, VGfloat *height) VG_API_EXIT;
VGfloat VG_API_ENTRY vegaPathLength(VGPath path, VGint startSegment, VGint numSegments) VG_API_EXIT;
void VG_API_ENTRY vegaPathTransformedBounds(VGPath path, VGfloat *minX, VGfloat *minY, VGfloat *width, VGfloat *height) VG_API_EXIT;
void VG_API_ENTRY vegaPointAlongPath(VGPath path, VGint startSegment, VGint numSegments, VGfloat distance, VGfloat *x, VGfloat *y, VGfloat *tangentX, VGfloat *tangentY) VG_API_EXIT;
void VG_API_ENTRY vegaReadPixels(void *data, VGint dataStride, VGImageFormat dataFormat, VGint sx, VGint sy, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaRemovePathCapabilities(VGPath path, VGbitfield capabilities) VG_API_EXIT;
void VG_API_ENTRY vegaRotate(VGfloat angle) VG_API_EXIT;
void VG_API_ENTRY vegaScale(VGfloat sx, VGfloat sy) VG_API_EXIT;
void VG_API_ENTRY vegaSeparableConvolve(VGImage dst, VGImage src, VGint kernelWidth, VGint kernelHeight, VGint shiftX, VGint shiftY, const VGshort *kernelX, const VGshort *kernelY, VGfloat scale, VGfloat bias, VGTilingMode tilingMode) VG_API_EXIT;
void VG_API_ENTRY vegaSetColor(VGPaint paint, VGuint rgba) VG_API_EXIT;
void VG_API_ENTRY vegaSetPaint(VGPaint paint, VGbitfield paintModes) VG_API_EXIT;
void VG_API_ENTRY vegaSetParameterf(VGHandle object, VGint paramType, VGfloat value) VG_API_EXIT;
void VG_API_ENTRY vegaSetParameterfv(VGHandle object, VGint paramType, VGint count, const VGfloat *values) VG_API_EXIT;
void VG_API_ENTRY vegaSetParameteri(VGHandle object, VGint paramType, VGint value) VG_API_EXIT;
void VG_API_ENTRY vegaSetParameteriv(VGHandle object, VGint paramType, VGint count, const VGint *values) VG_API_EXIT;
void VG_API_ENTRY vegaSetPixels(VGint dx, VGint dy, VGImage src, VGint sx, VGint sy, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaSetf(VGParamType type, VGfloat value) VG_API_EXIT;
void VG_API_ENTRY vegaSetfv(VGParamType type, VGint count, const VGfloat *values) VG_API_EXIT;
void VG_API_ENTRY vegaSeti(VGParamType type, VGint value) VG_API_EXIT;
void VG_API_ENTRY vegaSetiv(VGParamType type, VGint count, const VGint *values) VG_API_EXIT;
void VG_API_ENTRY vegaShear(VGfloat shx, VGfloat shy) VG_API_EXIT;
void VG_API_ENTRY vegaTransformPath(VGPath dstPath, VGPath srcPath) VG_API_EXIT;
void VG_API_ENTRY vegaTranslate(VGfloat tx, VGfloat ty) VG_API_EXIT;
void VG_API_ENTRY vegaWritePixels(const void *data, VGint dataStride, VGImageFormat dataFormat, VGint dx, VGint dy, VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaClearGlyph(VGFont font, VGuint glyphIndex) VG_API_EXIT;
void VG_API_ENTRY vegaCopyMask(VGMaskLayer maskLayer, VGint dx, VGint dy, VGint sx, VGint sy, VGint width, VGint height) VG_API_EXIT;
VGFont VG_API_ENTRY vegaCreateFont(VGint glyphCapacityHint) VG_API_EXIT;
VGMaskLayer VG_API_ENTRY vegaCreateMaskLayer(VGint width, VGint height) VG_API_EXIT;
void VG_API_ENTRY vegaDestroyFont(VGFont font) VG_API_EXIT;
void VG_API_ENTRY vegaDestroyMaskLayer(VGMaskLayer maskLayer) VG_API_EXIT;
void VG_API_ENTRY vegaDrawGlyph(VGFont font, VGuint glyphIndex, VGbitfield paintModes, VGboolean allowAutoHinting) VG_API_EXIT;
void VG_API_ENTRY vegaDrawGlyphs(VGFont font, VGint glyphCount, const VGuint *glyphIndices, const VGfloat *adjustments_x, const VGfloat *adjustments_y, VGbitfield paintModes, VGboolean allowAutoHinting) VG_API_EXIT;
void VG_API_ENTRY vegaFillMaskLayer(VGMaskLayer maskLayer, VGint x, VGint y, VGint width, VGint height, VGfloat value) VG_API_EXIT;
void VG_API_ENTRY vegaRenderToMask(VGPath path, VGbitfield paintModes, VGMaskOperation operation) VG_API_EXIT;
void VG_API_ENTRY vegaSetGlyphToImage(VGFont font, VGuint glyphIndex, VGImage image, const VGfloat glyphOrigin[2], const VGfloat escapement[2]) VG_API_EXIT;
void VG_API_ENTRY vegaSetGlyphToPath(VGFont font, VGuint glyphIndex, VGPath path, VGboolean isHinted, const VGfloat glyphOrigin[2], const VGfloat escapement[2]) VG_API_EXIT;

#ifdef API_TMP_DEFINE_SPEC

static const char vega_spec[] =
   "1\0"
   "AppendPath\0\0"
   "AppendPathData\0\0"
   "ChildImage\0\0"
   "Clear\0\0"
   "ClearImage\0\0"
   "ClearPath\0\0"
   "ColorMatrix\0\0"
   "Convolve\0\0"
   "CopyImage\0\0"
   "CopyPixels\0\0"
   "CreateImage\0\0"
   "CreatePaint\0\0"
   "CreatePath\0\0"
   "DestroyImage\0\0"
   "DestroyPaint\0\0"
   "DestroyPath\0\0"
   "DrawImage\0\0"
   "DrawPath\0\0"
   "Finish\0\0"
   "Flush\0\0"
   "GaussianBlur\0\0"
   "GetColor\0\0"
   "GetError\0\0"
   "GetImageSubData\0\0"
   "GetMatrix\0\0"
   "GetPaint\0\0"
   "GetParameterVectorSize\0\0"
   "GetParameterf\0\0"
   "GetParameterfv\0\0"
   "GetParameteri\0\0"
   "GetParameteriv\0\0"
   "GetParent\0\0"
   "GetPathCapabilities\0\0"
   "GetPixels\0\0"
   "GetString\0\0"
   "GetVectorSize\0\0"
   "Getf\0\0"
   "Getfv\0\0"
   "Geti\0\0"
   "Getiv\0\0"
   "HardwareQuery\0\0"
   "ImageSubData\0\0"
   "InterpolatePath\0\0"
   "LoadIdentity\0\0"
   "LoadMatrix\0\0"
   "Lookup\0\0"
   "LookupSingle\0\0"
   "Mask\0\0"
   "ModifyPathCoords\0\0"
   "MultMatrix\0\0"
   "PaintPattern\0\0"
   "PathBounds\0\0"
   "PathLength\0\0"
   "PathTransformedBounds\0\0"
   "PointAlongPath\0\0"
   "ReadPixels\0\0"
   "RemovePathCapabilities\0\0"
   "Rotate\0\0"
   "Scale\0\0"
   "SeparableConvolve\0\0"
   "SetColor\0\0"
   "SetPaint\0\0"
   "SetParameterf\0\0"
   "SetParameterfv\0\0"
   "SetParameteri\0\0"
   "SetParameteriv\0\0"
   "SetPixels\0\0"
   "Setf\0\0"
   "Setfv\0\0"
   "Seti\0\0"
   "Setiv\0\0"
   "Shear\0\0"
   "TransformPath\0\0"
   "Translate\0\0"
   "WritePixels\0\0"
   "ClearGlyph\0\0"
   "CopyMask\0\0"
   "CreateFont\0\0"
   "CreateMaskLayer\0\0"
   "DestroyFont\0\0"
   "DestroyMaskLayer\0\0"
   "DrawGlyph\0\0"
   "DrawGlyphs\0\0"
   "FillMaskLayer\0\0"
   "RenderToMask\0\0"
   "SetGlyphToImage\0\0"
   "SetGlyphToPath\0";

static const mapi_proc vega_procs[] = {
   (mapi_proc) vegaAppendPath,
   (mapi_proc) vegaAppendPathData,
   (mapi_proc) vegaChildImage,
   (mapi_proc) vegaClear,
   (mapi_proc) vegaClearImage,
   (mapi_proc) vegaClearPath,
   (mapi_proc) vegaColorMatrix,
   (mapi_proc) vegaConvolve,
   (mapi_proc) vegaCopyImage,
   (mapi_proc) vegaCopyPixels,
   (mapi_proc) vegaCreateImage,
   (mapi_proc) vegaCreatePaint,
   (mapi_proc) vegaCreatePath,
   (mapi_proc) vegaDestroyImage,
   (mapi_proc) vegaDestroyPaint,
   (mapi_proc) vegaDestroyPath,
   (mapi_proc) vegaDrawImage,
   (mapi_proc) vegaDrawPath,
   (mapi_proc) vegaFinish,
   (mapi_proc) vegaFlush,
   (mapi_proc) vegaGaussianBlur,
   (mapi_proc) vegaGetColor,
   (mapi_proc) vegaGetError,
   (mapi_proc) vegaGetImageSubData,
   (mapi_proc) vegaGetMatrix,
   (mapi_proc) vegaGetPaint,
   (mapi_proc) vegaGetParameterVectorSize,
   (mapi_proc) vegaGetParameterf,
   (mapi_proc) vegaGetParameterfv,
   (mapi_proc) vegaGetParameteri,
   (mapi_proc) vegaGetParameteriv,
   (mapi_proc) vegaGetParent,
   (mapi_proc) vegaGetPathCapabilities,
   (mapi_proc) vegaGetPixels,
   (mapi_proc) vegaGetString,
   (mapi_proc) vegaGetVectorSize,
   (mapi_proc) vegaGetf,
   (mapi_proc) vegaGetfv,
   (mapi_proc) vegaGeti,
   (mapi_proc) vegaGetiv,
   (mapi_proc) vegaHardwareQuery,
   (mapi_proc) vegaImageSubData,
   (mapi_proc) vegaInterpolatePath,
   (mapi_proc) vegaLoadIdentity,
   (mapi_proc) vegaLoadMatrix,
   (mapi_proc) vegaLookup,
   (mapi_proc) vegaLookupSingle,
   (mapi_proc) vegaMask,
   (mapi_proc) vegaModifyPathCoords,
   (mapi_proc) vegaMultMatrix,
   (mapi_proc) vegaPaintPattern,
   (mapi_proc) vegaPathBounds,
   (mapi_proc) vegaPathLength,
   (mapi_proc) vegaPathTransformedBounds,
   (mapi_proc) vegaPointAlongPath,
   (mapi_proc) vegaReadPixels,
   (mapi_proc) vegaRemovePathCapabilities,
   (mapi_proc) vegaRotate,
   (mapi_proc) vegaScale,
   (mapi_proc) vegaSeparableConvolve,
   (mapi_proc) vegaSetColor,
   (mapi_proc) vegaSetPaint,
   (mapi_proc) vegaSetParameterf,
   (mapi_proc) vegaSetParameterfv,
   (mapi_proc) vegaSetParameteri,
   (mapi_proc) vegaSetParameteriv,
   (mapi_proc) vegaSetPixels,
   (mapi_proc) vegaSetf,
   (mapi_proc) vegaSetfv,
   (mapi_proc) vegaSeti,
   (mapi_proc) vegaSetiv,
   (mapi_proc) vegaShear,
   (mapi_proc) vegaTransformPath,
   (mapi_proc) vegaTranslate,
   (mapi_proc) vegaWritePixels,
   (mapi_proc) vegaClearGlyph,
   (mapi_proc) vegaCopyMask,
   (mapi_proc) vegaCreateFont,
   (mapi_proc) vegaCreateMaskLayer,
   (mapi_proc) vegaDestroyFont,
   (mapi_proc) vegaDestroyMaskLayer,
   (mapi_proc) vegaDrawGlyph,
   (mapi_proc) vegaDrawGlyphs,
   (mapi_proc) vegaFillMaskLayer,
   (mapi_proc) vegaRenderToMask,
   (mapi_proc) vegaSetGlyphToImage,
   (mapi_proc) vegaSetGlyphToPath
};

#endif /* API_TMP_DEFINE_SPEC */
