.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "FWIDTH Cg"
.TH FWIDTH Cg "Cg Toolkit 3.0" "perl v5.10.0" "Cg Standard Library"
.if n .ad l
.nh
.SH "NAME"
\&\fBfwidth\fR \- returns sum of approximate window-space partial derivatives magnitudes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  float  fwidth(float a);
\&  float1 fwidth(float1 a);
\&  float2 fwidth(float2 a);
\&  float3 fwidth(float3 a);
\&  float4 fwidth(float4 a);
\& 
\&  half   fwidth(half a);
\&  half1  fwidth(half1 a);
\&  half2  fwidth(half2 a);
\&  half3  fwidth(half3 a);
\&  half4  fwidth(half4 a);
\& 
\&  fixed  fwidth(fixed a);
\&  fixed1 fwidth(fixed1 a);
\&  fixed2 fwidth(fixed2 a);
\&  fixed3 fwidth(fixed3 a);
\&  fixed4 fwidth(fixed4 a);
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "a" 8
.IX Item "a"
Vector or scalar of which to sum its approximate window-space partial
derivative magnitudes.  with respect to window-space X and Y.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Returns sum of the absolute values of each approximate partial derivative
of \fIa\fR with respect to both the window-space (horizontal) \fIx\fR and
(vertical) \fIy) coordinate.\fR
.PP
For vectors, the returned vector contains the sum of partial derivative
magnitudes of each element of the input vector.
.PP
This function can be used to approximate the \fIfragment width\fR (hence
the name \*(L"fwidth\*(R") for level-of-detail computations dependent on change
in window-space.
.PP
This function is only available in fragment program profiles (but not
all of them).
.PP
The specific way the partial derivative is computed is
implementation-dependent.  Typically fragments are rasterized in
2x2 arrangements of fragments (called quad-fragments) and the partial
derivatives of a variable is computed by differencing with the adjacent
horizontal fragment in the quad-fragment.
.PP
The partial derivative computation may incorrect when \fBfwidth\fR is used in
control flow paths where not all the fragments within a quad-fragment
have branched the same way.
.PP
The partial derivative computation may be less exact (wobbly) when
the variable is computed based on varying parameters interpolated with
centroid interpolation.
.SH "REFERENCE IMPLEMENTATION"
.IX Header "REFERENCE IMPLEMENTATION"
\&\fBfmod\fR for \fBfloat3\fR vectors could be implemented this way:
.PP
.Vb 4
\&  float3 fwidth(float3 a)
\&  {
\&    return abs(ddx(a)) + abs(ddy(a));
\&  }
.Ve
.SH "PROFILE SUPPORT"
.IX Header "PROFILE SUPPORT"
\&\fBfwidth\fR is supported only in fragment profiles.  Vertex and geometry
profiles lack the concept of window space.
.PP
\&\fBfwidth\fR is unsupported in the fp20, ps_1_1,
ps_1_2, ps_1_3, and arbfp1 profiles.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ddx, ddy, fp30, fp40, gp4fp
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 40:" 4
.IX Item "Around line 40:"
Unterminated I<...> sequence
