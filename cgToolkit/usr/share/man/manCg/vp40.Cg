.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "VP40 Cg"
.TH VP40 Cg "Cg Toolkit 3.0" "perl v5.10.0" "Cg Profiles"
.if n .ad l
.nh
.SH "NAME"
\&\fBvp40\fR \- OpenGL vertex profile for \s-1NVIDIA\s0 GeForce 6/7 Series, NV4x\-based Quadro \s-1FX\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  vp40
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This OpenGL profile corresponds to the per-vertex functionality
introduced by the GeForce 6800 and other NV4x\-based \s-1NVIDIA\s0 GPUs.
.PP
The compiler output for this profile conforms to the assembly format
defined by \fBNV_vertex_program3\fR and \fBARB_vertex_program\fR.
.PP
Data-dependent loops and branching \fIare\fR allowed.
.PP
Relative indexing of uniform arrays \fIis\fR supported.
.PP
Texture accesses are supported. However substantial limitations on vertex
texturing exist for hardware acceleration by NV4x hardware.
.PP
NV4x hardware accelerates vertex fetches only for 1\-, 3\-,
and 4\-component floating-point textures.  NV4x hardware does not
accelerated vertex-texturing for cube maps or 3D textures.  NV4x does
allow non-power-of-two sizes (width and height).
.SH "3D API DEPENDENCIES"
.IX Header "3D API DEPENDENCIES"
Requires OpenGL support for the \fBNV_fragment_program3\fR extension.  These
extensions were introduced by the GeForce 6800 and other NV4x\-based GPUs.
.Sh "OpenGL Extension Specifications"
.IX Subsection "OpenGL Extension Specifications"
.Vb 2
\& http://www.opengl.org/registry/specs/NV/vertex_program3.txt 
\& http://www.opengl.org/registry/specs/ARB/vertex_program.txt
.Ve
.SH "PROFILE OPTIONS"
.IX Header "PROFILE OPTIONS"
.IP "PosInv=\fIval\fR" 4
.IX Item "PosInv=val"
Non-zero means generates code for position-invariant (with fixed-function)
position transformation.
.IP "NumTemps=\fIval\fR" 4
.IX Item "NumTemps=val"
Maximum number of temporary registers the implementation supports.
Set to the implementaiton-dependent value of
\&\f(CW\*(C`GL_MAX_NATIVE_TEMPORARIES_ARB\*(C'\fR for best performance.
.IP "MaxAddressRegs=\fIval\fR" 4
.IX Item "MaxAddressRegs=val"
Maximum number of address registers the implementation supports.
Set to the implementaiton-dependent value of
\&\f(CW\*(C`GL_MAX_NATIVE_ADDRESS_REGISTERS_ARB\*(C'\fR for best performance.
.IP "MaxInstructions=\fIval\fR" 4
.IX Item "MaxInstructions=val"
Maximum number of instructions the implementation supports.
Set to the implementaiton-dependent value of
\&\f(CW\*(C`GL_MAX_NATIVE_INSTRUCTIONS_ARB\*(C'\fR for best performance.
.IP "MaxLocalParams=\fIval\fR" 4
.IX Item "MaxLocalParams=val"
Maximum number of local parameters the implementation supports.
.SH "DATA TYPES"
.IX Header "DATA TYPES"
.IP "float" 4
.IX Item "float"
This profile implements the float data type as \s-1IEEE\s0 32\-bit single precision.
.IP "half" 4
.IX Item "half"
.PD 0
.IP "double" 4
.IX Item "double"
.PD
\&\f(CW\*(C`half\*(C'\fR and \f(CW\*(C`double\*(C'\fR data types are treated as \f(CW\*(C`float\*(C'\fR.
.IP "int" 4
.IX Item "int"
The \f(CW\*(C`int\*(C'\fR data type is supported using floating point operations, which
adds extra instructions for proper truncation for divides, modulos and
casts from floating point types.  Because integer values are simulated
with \s-1IEEE\s0 single-precision floating-point, they are accurate over the
range \-2^24 to 2^24 but will not overflow like true integers.
.IP "fixed" 4
.IX Item "fixed"
.PD 0
.IP "sampler*" 4
.IX Item "sampler*"
.PD
This profile does not support any operations on the \f(CW\*(C`fixed\*(C'\fR or
\&\f(CW\*(C`sampler\*(C'\fR* data types, but does provide the minimal \fIpartial support\fR
that is required for these data types by the core language spec (i.e. it
is legal to declare variables using these types, as long as no operations
are performed on the variables).
.SH "SEMANTICS"
.IX Header "SEMANTICS"
.Sh "\s-1VARYING\s0 \s-1INPUT\s0 \s-1SEMANTICS\s0"
.IX Subsection "VARYING INPUT SEMANTICS"
The set of binding semantics for varying input data to vp40 consists
of \s-1POSITION\s0, \s-1BLENDWEIGHT\s0, \s-1NORMAL\s0, \s-1COLOR0\s0, \s-1COLOR1\s0, \s-1TESSFACTOR\s0, \s-1PSIZE\s0,
\&\s-1BLENDINDICES\s0, and \s-1TEXCOORD0\-TEXCOORD7\s0. One can also use \s-1TANGENT\s0 and
\&\s-1BINORMAL\s0 instead of \s-1TEXCOORD6\s0 and \s-1TEXCOORD7\s0.
.PP
Additionally, a set of binding semantics \s-1ATTR0\-ATTR15\s0 can be
used. These binding semantics map to \fBNV_vertex_program3\fR input attribute
parameters.
.PP
The two sets act as aliases to each other on \s-1NVIDIA\s0 GPUs excluding Apple
Macs.  \s-1ATI\s0 GPUs and \s-1NVIDIA\s0 Mac GPUs do \fInot\fR alias the conventional
vertex attributes with the generic attributes.
.PP
.Vb 1
\&  Binding Semantics Name        Corresponding Data
\&  
\&  POSITION, ATTR0              Input Vertex, Generic Attribute 0 
\&  
\&  BLENDWEIGHT, ATTR1           Input vertex weight, Generic Attribute 1 
\&  
\&  NORMAL, ATTR2                Input normal, Generic Attribute 2
\&  
\&  DIFFUSE, COLOR0, ATTR3       Input primary color, Generic Attribute 3
\&  
\&  SPECULAR, COLOR1, ATTR4      Input secondary color, Generic Attribute 4
\&  
\&  TESSFACTOR, FOGCOORD, ATTR5  Input fog coordinate, Generic Attribute 5
\&  
\&  PSIZE, ATTR6                 Input point size, Generic Attribute 6
\&  
\&  BLENDINDICES, ATTR7          Generic Attribute 7
\&  
\&  TEXCOORD0\-TEXCOORD7,         Input texture coordinates (texcoord0\-texcoord7)
\&  ATTR8\-ATTR15                 Generic Attributes 8\-15
\&
\&  TANGENT, ATTR14              Generic Attribute 14
\&
\&  BINORMAL, ATTR15             Generic Attribute 15
.Ve
.Sh "\s-1UNIFORM\s0 \s-1INPUT\s0 \s-1SEMANTICS\s0"
.IX Subsection "UNIFORM INPUT SEMANTICS"
.Vb 2
\&  C0\-C255           Constant register [0..255].
\&                    The aliases c0\-c255 (lowercase) are also accepted.
.Ve
.PP
If used with a variable that requires more than one constant register
(e.g. a matrix), the semantic specifies the first register that is used.
.PP
.Vb 2
\&  TEXUNIT0\-TEXUNIT15  Texture unit (but only 4 distinct texture units
\&                      are allowed)
.Ve
.Sh "\s-1OUTPUT\s0 \s-1SEMANTICS\s0"
.IX Subsection "OUTPUT SEMANTICS"
.Vb 1
\&  Binding Semantics Name        Corresponding Data
\&  
\&  POSITION, HPOS                Output position
\&  
\&  PSIZE, PSIZ                   Output point size
\&  
\&  FOG, FOGC                     Output fog coordinate
\&  
\&  COLOR0, COL0                  Output primary color 
\&  
\&  COLOR1, COL1                  Output secondary color
\&  
\&  BCOL0                         Output backface primary color
\&  
\&  BCOL1                         Output backface secondary color
\&  
\&  TEXCOORD0\-TEXCOORD7,          Output texture coordinates
\&  TEX0\-TEX7
\&  
\&  CLP0\-CL5                      Output Clip distances
.Ve
.SH "STANDARD LIBRARY ISSUES"
.IX Header "STANDARD LIBRARY ISSUES"
Standard library routines for texture cube map and rectangle samplers
are not supported by vp40.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
fp40
