.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "MUL Cg"
.TH MUL Cg "Cg Toolkit 3.0" "perl v5.10.0" "Cg Standard Library"
.if n .ad l
.nh
.SH "NAME"
\&\fBmul\fR \- multiply a matrix by a column vector, row vector by a matrix, or matrix by a matrix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  float4 mul(float4x4 M, float4 v);
\&  float4 mul(float4x3 M, float3 v);
\&  float4 mul(float4x2 M, float2 v);
\&  float4 mul(float4x1 M, float1 v);
\&  float3 mul(float3x4 M, float4 v);
\&  float3 mul(float3x3 M, float3 v);
\&  float3 mul(float3x2 M, float2 v);
\&  float3 mul(float3x1 M, float1 v);
\&  float2 mul(float2x4 M, float4 v);
\&  float2 mul(float2x3 M, float3 v);
\&  float2 mul(float2x2 M, float2 v);
\&  float2 mul(float2x1 M, float1 v);
\&  float1 mul(float1x4 M, float4 v);
\&  float1 mul(float1x3 M, float3 v);
\&  float1 mul(float1x2 M, float2 v);
\&  float1 mul(float1x1 M, float1 v);
\&
\&  float4 mul(float4 v, float4x4 M);
\&  float4 mul(float3 v, float3x4 M);
\&  float4 mul(float2 v, float2x4 M);
\&  float4 mul(float1 v, float1x4 M);
\&  float3 mul(float4 v, float4x3 M);
\&  float3 mul(float3 v, float3x3 M);
\&  float3 mul(float2 v, float2x3 M);
\&  float3 mul(float1 v, float1x3 M);
\&  float2 mul(float4 v, float4x2 M);
\&  float2 mul(float3 v, float3x2 M);
\&  float2 mul(float2 v, float2x2 M);
\&  float2 mul(float1 v, float1x2 M);
\&  float1 mul(float4 v, float4x1 M);
\&  float1 mul(float3 v, float3x1 M);
\&  float1 mul(float2 v, float2x1 M);
\&  float1 mul(float1 v, float1x1 M);
\&
\&  half4 mul(half4x4 M, half4 v);
\&  half4 mul(half4x3 M, half3 v);
\&  half4 mul(half4x2 M, half2 v);
\&  half4 mul(half4x1 M, half1 v);
\&  half3 mul(half3x4 M, half4 v);
\&  half3 mul(half3x3 M, half3 v);
\&  half3 mul(half3x2 M, half2 v);
\&  half3 mul(half3x1 M, half1 v);
\&  half2 mul(half2x4 M, half4 v);
\&  half2 mul(half2x3 M, half3 v);
\&  half2 mul(half2x2 M, half2 v);
\&  half2 mul(half2x1 M, half1 v);
\&  half1 mul(half1x4 M, half4 v);
\&  half1 mul(half1x3 M, half3 v);
\&  half1 mul(half1x2 M, half2 v);
\&  half1 mul(half1x1 M, half1 v);
\&
\&  half4 mul(half4 v, half4x4 M);
\&  half4 mul(half3 v, half3x4 M);
\&  half4 mul(half2 v, half2x4 M);
\&  half4 mul(half1 v, half1x4 M);
\&  half3 mul(half4 v, half4x3 M);
\&  half3 mul(half3 v, half3x3 M);
\&  half3 mul(half2 v, half2x3 M);
\&  half3 mul(half1 v, half1x3 M);
\&  half2 mul(half4 v, half4x2 M);
\&  half2 mul(half3 v, half3x2 M);
\&  half2 mul(half2 v, half2x2 M);
\&  half2 mul(half1 v, half1x2 M);
\&  half1 mul(half4 v, half4x1 M);
\&  half1 mul(half3 v, half3x1 M);
\&  half1 mul(half2 v, half2x1 M);
\&  half1 mul(half1 v, half1x1 M);
\&
\&  fixed4 mul(fixed4x4 M, fixed4 v);
\&  fixed4 mul(fixed4x3 M, fixed3 v);
\&  fixed4 mul(fixed4x2 M, fixed2 v);
\&  fixed4 mul(fixed4x1 M, fixed1 v);
\&  fixed3 mul(fixed3x4 M, fixed4 v);
\&  fixed3 mul(fixed3x3 M, fixed3 v);
\&  fixed3 mul(fixed3x2 M, fixed2 v);
\&  fixed3 mul(fixed3x1 M, fixed1 v);
\&  fixed2 mul(fixed2x4 M, fixed4 v);
\&  fixed2 mul(fixed2x3 M, fixed3 v);
\&  fixed2 mul(fixed2x2 M, fixed2 v);
\&  fixed2 mul(fixed2x1 M, fixed1 v);
\&  fixed1 mul(fixed1x4 M, fixed4 v);
\&  fixed1 mul(fixed1x3 M, fixed3 v);
\&  fixed1 mul(fixed1x2 M, fixed2 v);
\&  fixed1 mul(fixed1x1 M, fixed1 v);
\&
\&  fixed4 mul(fixed4 v, fixed4x4 M);
\&  fixed4 mul(fixed3 v, fixed3x4 M);
\&  fixed4 mul(fixed2 v, fixed2x4 M);
\&  fixed4 mul(fixed1 v, fixed1x4 M);
\&  fixed3 mul(fixed4 v, fixed4x3 M);
\&  fixed3 mul(fixed3 v, fixed3x3 M);
\&  fixed3 mul(fixed2 v, fixed2x3 M);
\&  fixed3 mul(fixed1 v, fixed1x3 M);
\&  fixed2 mul(fixed4 v, fixed4x2 M);
\&  fixed2 mul(fixed3 v, fixed3x2 M);
\&  fixed2 mul(fixed2 v, fixed2x2 M);
\&  fixed2 mul(fixed1 v, fixed1x2 M);
\&  fixed1 mul(fixed4 v, fixed4x1 M);
\&  fixed1 mul(fixed3 v, fixed3x1 M);
\&  fixed1 mul(fixed2 v, fixed2x1 M);
\&  fixed1 mul(fixed1 v, fixed1x1 M);
\&
\&  float1x1 mul(float1x1 A, float1x1 B);
\&  float1x2 mul(float1x1 A, float1x2 B);
\&  float1x3 mul(float1x1 A, float1x3 B);
\&  float1x4 mul(float1x1 A, float1x4 B);
\&
\&  float1x1 mul(float1x2 A, float2x1 B);
\&  float1x2 mul(float1x2 A, float2x2 B);
\&  float1x3 mul(float1x2 A, float2x3 B);
\&  float1x4 mul(float1x2 A, float2x4 B);
\&
\&  float1x1 mul(float1x3 A, float3x1 B);
\&  float1x2 mul(float1x3 A, float3x2 B);
\&  float1x3 mul(float1x3 A, float3x3 B);
\&  float1x4 mul(float1x3 A, float3x4 B);
\&
\&  float1x1 mul(float1x4 A, float4x1 B);
\&  float1x2 mul(float1x4 A, float4x2 B);
\&  float1x3 mul(float1x4 A, float4x3 B);
\&  float1x4 mul(float1x4 A, float4x4 B);
\&
\&  float2x1 mul(float2x1 A, float1x1 B);
\&  float2x2 mul(float2x1 A, float1x2 B);
\&  float2x3 mul(float2x1 A, float1x3 B);
\&  float2x4 mul(float2x1 A, float1x4 B);
\&
\&  float2x1 mul(float2x2 A, float2x1 B);
\&  float2x2 mul(float2x2 A, float2x2 B);
\&  float2x3 mul(float2x2 A, float2x3 B);
\&  float2x4 mul(float2x2 A, float2x4 B);
\&
\&  float2x1 mul(float2x3 A, float3x1 B);
\&  float2x2 mul(float2x3 A, float3x2 B);
\&  float2x3 mul(float2x3 A, float3x3 B);
\&  float2x4 mul(float2x3 A, float3x4 B);
\&
\&  float2x1 mul(float2x4 A, float4x1 B);
\&  float2x2 mul(float2x4 A, float4x2 B);
\&  float2x3 mul(float2x4 A, float4x3 B);
\&  float2x4 mul(float2x4 A, float4x4 B);
\&
\&  float3x1 mul(float3x1 A, float1x1 B);
\&  float3x2 mul(float3x1 A, float1x2 B);
\&  float3x3 mul(float3x1 A, float1x3 B);
\&  float3x4 mul(float3x1 A, float1x4 B);
\&
\&  float3x1 mul(float3x2 A, float2x1 B);
\&  float3x2 mul(float3x2 A, float2x2 B);
\&  float3x3 mul(float3x2 A, float2x3 B);
\&  float3x4 mul(float3x2 A, float2x4 B);
\&
\&  float3x1 mul(float3x3 A, float3x1 B);
\&  float3x2 mul(float3x3 A, float3x2 B);
\&  float3x3 mul(float3x3 A, float3x3 B);
\&  float3x4 mul(float3x3 A, float3x4 B);
\&
\&  float3x1 mul(float3x4 A, float4x1 B);
\&  float3x2 mul(float3x4 A, float4x2 B);
\&  float3x3 mul(float3x4 A, float4x3 B);
\&  float3x4 mul(float3x4 A, float4x4 B);
\&
\&  float4x1 mul(float4x1 A, float1x1 B);
\&  float4x2 mul(float4x1 A, float1x2 B);
\&  float4x3 mul(float4x1 A, float1x3 B);
\&  float4x4 mul(float4x1 A, float1x4 B);
\&
\&  float4x1 mul(float4x2 A, float2x1 B);
\&  float4x2 mul(float4x2 A, float2x2 B);
\&  float4x3 mul(float4x2 A, float2x3 B);
\&  float4x4 mul(float4x2 A, float2x4 B);
\&
\&  float4x1 mul(float4x3 A, float3x1 B);
\&  float4x2 mul(float4x3 A, float3x2 B);
\&  float4x3 mul(float4x3 A, float3x3 B);
\&  float4x4 mul(float4x3 A, float3x4 B);
\&
\&  float4x1 mul(float4x4 A, float4x1 B);
\&  float4x2 mul(float4x4 A, float4x2 B);
\&  float4x3 mul(float4x4 A, float4x3 B);
\&  float4x4 mul(float4x4 A, float4x4 B);
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "M" 8
.IX Item "M"
Matrix
.IP "v" 8
.IX Item "v"
Vector
.IP "A" 8
.IX Item "A"
Matrix
.IP "B" 8
.IX Item "B"
Matrix
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Returns the vector result of multiplying a matrix \fIM\fR by a column vector
\&\fIv\fR; a row vector \fIv\fR by a matrix \fIM\fR; or a matrix \fIA\fR by a second
matrix \fIB\fR.
.PP
The following are algebrically equal (if not necessarily numerically
equal):
.PP
.Vb 2
\&  mul(M,v) == mul(v, tranpose(M))
\&  mul(v,M) == mul(tranpose(M), v)
.Ve
.SH "REFERENCE IMPLEMENTATION"
.IX Header "REFERENCE IMPLEMENTATION"
\&\fBmul\fR for a \fBfloat4x3\fR matrix by a \fBfloat3\fR column vector could be
implemented this way:
.PP
.Vb 3
\&  float4 mul(float4x3 M, float3 v)
\&  {
\&    float4 r;
\&
\&    r.x = dot( M._m00_m01_m02, v );
\&    r.y = dot( M._m10_m11_m12, v );
\&    r.z = dot( M._m20_m21_m22, v );
\&    r.w = dot( M._m30_m31_m32, v );
\&
\&    return r;
\&  }
.Ve
.SH "PROFILE SUPPORT"
.IX Header "PROFILE SUPPORT"
\&\fBmul\fR is supported in all profiles except the fp20,
ps_1_1, ps_1_2, and ps_1_3 fragment
profiles.
.PP
The \fBfixed3\fR matrix-by-vector and vector-by-matrix multiplies are very
efficient in the fp30 profile.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cross, dot, transpose
