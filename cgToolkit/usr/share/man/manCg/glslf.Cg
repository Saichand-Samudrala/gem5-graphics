.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "GLSLF Cg"
.TH GLSLF Cg "Cg Toolkit 3.0" "perl v5.10.0" "Cg Profiles"
.if n .ad l
.nh
.SH "NAME"
\&\fBglslf\fR \- OpenGL fragment profile for the OpenGL Shading Lanauge (\s-1GLSL\s0)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  glslf
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This OpenGL profile corresponds to the per-fragment functionality
introduced by the OpenGL Shading Language.
.PP
The compiler output for this profile conforms to the language grammar
defined by the OpenGL Shading Language specification.
.SH "3D API DEPENDENCIES"
.IX Header "3D API DEPENDENCIES"
Requires support for \fBOpenGL 2.0\fR.
.Sh "OpenGL Extension Specifications"
.IX Subsection "OpenGL Extension Specifications"
.Vb 3
\& http://www.opengl.org/documentation/specs/version2.0/glspec20.pdf
\& http://www.opengl.org/documentation/glsl/
\& http://www.opengl.org/registry/doc/GLSLangSpec.Full.1.20.8.pdf
.Ve
.SH "PROFILE OPTIONS"
.IX Header "PROFILE OPTIONS"
.IP "version=\fIval\fR" 4
.IX Item "version=val"
\&\s-1GLSL\s0 version to target.  Supported versions are \fB100\fR, \fB110\fR, \fB120\fR, \fB130\fR, \fB140\fR and \fB150\fR.
.IP "userTexCoord" 4
.IX Item "userTexCoord"
Use user-defined varying instead of \fBgl_TexCoord\fR.
.IP "ATI_draw_buffers" 4
.IX Item "ATI_draw_buffers"
Use \fBATI_draw_buffers\fR extension for \s-1MRT\s0.
.IP "EXT_gpu_shader4" 4
.IX Item "EXT_gpu_shader4"
Use \fBEXT_gpu_shader4\fR extension where useful.
.SH "DATA TYPES"
.IX Header "DATA TYPES"
The Cg half and fixed data types are both mapped to float because \s-1GLSL\s0 lacks first-class half and fixed data types.
.SH "SEMANTICS"
.IX Header "SEMANTICS"
.Sh "\s-1VARYING\s0 \s-1INPUT\s0 \s-1SEMANTICS\s0"
.IX Subsection "VARYING INPUT SEMANTICS"
.Vb 1
\&  Binding Semantics Name           Corresponding Data           GLSL Equivalent
\&  
\&  COLOR                            Primary color (float4)       gl_Color
\&  COLOR0
\&  COL0
\&  COL
\&
\&  COLOR1                           Secondary color (float4)     gl_SecondaryColor
\&  COL1
\&
\&  TEXCOORD                         Texture coordinate set 0     gl_TexCoord[0]
\&  TEXCOORD#                        Texture coordinate set #     gl_TexCoord[#]
\&  TEX#
\&
\&  FACE                             Front/back facing (+1/\-1)    gl_FrontFacing
.Ve
.Sh "\s-1UNIFORM\s0 \s-1INPUT\s0 \s-1SEMANTICS\s0"
.IX Subsection "UNIFORM INPUT SEMANTICS"
Sixteen texture units are supported:
.PP
.Vb 1
\&  Binding Semantic Name            Corresponding Data
\&
\&  TEXUNIT0                         Texture unit 0
\&  TEXUNIT1                         Texture unit 1
\&  ...
\&  TEXUNIT15                        Texture unit 15
.Ve
.PP
The Cg profiles for \s-1GLSL\s0 provide access to all the uniform constants and variables documented in Section 7.4 (Built-in Constants) and 7.5 (Built-in Uniform State) respectively of the OpenGL Shading Language specification found at:
.PP
.Vb 2
\&  http://www.opengl.org/documentation/glsl/
\&  http://www.opengl.org/registry/doc/GLSLangSpec.Full.1.20.8.pdf
.Ve
.PP
Example:
.PP
.Vb 6
\&  glslf void main(float4 color : COLOR,
\&                  out float4 ocol : COLOR)
\&  {
\&    ocol.xyz = mul(gl_NormalMatrix, color.xyz);
\&    ocol.w = 1;
\&  }
.Ve
.Sh "\s-1OUTPUT\s0 \s-1SEMANTICS\s0"
.IX Subsection "OUTPUT SEMANTICS"
The following standard fragment output semantics are supported:
.PP
.Vb 1
\&  Binding Semantics Name           Corresponding Data      GLSL Equivalent
\&  
\&  COLOR                            Output color (float4)   gl_FragColor
\&  COLOR0
\&  COL0
\&  COL
\&   
\&  COLOR0\-COLOR7                    Output color (float4)   gl_FragData[n]
\&  COL0\-COL7                        for draw buffers 0 to 7
\& 
\&  DEPTH                            Output depth (float)    gl_FragDepth
\&  DEPR
.Ve
.SH "STANDARD LIBRARY ISSUES"
.IX Header "STANDARD LIBRARY ISSUES"
Fragment program Cg standard library routines are available.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
glslv,
glslg
