.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "SMOOTHSTEP Cg"
.TH SMOOTHSTEP Cg "Cg Toolkit 3.0" "perl v5.10.0" "Cg Standard Library"
.if n .ad l
.nh
.SH "NAME"
\&\fBsmoothstep\fR \- interpolate smoothly between two input values based on a third
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  float  smoothstep(float  a, float  b, float  x);
\&  float1 smoothstep(float1 a, float1 b, float1 x);
\&  float2 smoothstep(float2 a, float2 b, float2 x);
\&  float3 smoothstep(float3 a, float3 b, float3 x);
\&  float4 smoothstep(float4 a, float4 b, float4 x);
\& 
\&  half   smoothstep(half  a, half  b, half  x);
\&  half1  smoothstep(half1 a, half1 b, half1 x);
\&  half2  smoothstep(half2 a, half2 b, half2 x);
\&  half3  smoothstep(half3 a, half3 b, half3 x);
\&  half4  smoothstep(half4 a, half4 b, half4 x);
\& 
\&  fixed  smoothstep(fixed  a, fixed  b, fixed  x);
\&  fixed1 smoothstep(fixed1 a, fixed1 b, fixed1 x);
\&  fixed2 smoothstep(fixed2 a, fixed2 b, fixed2 x);
\&  fixed3 smoothstep(fixed3 a, fixed3 b, fixed3 x);
\&  fixed4 smoothstep(fixed4 a, fixed4 b, fixed4 x);
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "a" 8
.IX Item "a"
Scalar or vector minimum reference value(s).
.IP "b" 8
.IX Item "b"
Scalar or vector minimum reference value(s).
.IP "x" 8
.IX Item "x"
Scalar or vector.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Interpolates smoothly from \fI0\fR to \fI1\fR based on \fIx\fR compared to \fIa\fR and \fIb\fR.
.IP "\(bu" 8
1) Returns \fI0\fR if \fI<x < a < b\fR> or  \fI<x \fR a > b>>
.IP "\(bu" 8
1) Returns \fI1\fR if \fI<x < b < a\fR> or  \fI<x \fR b > a>>
.IP "\(bu" 8
3) Returns a value in the range \fI[0,1]\fR for the domain \fI[a,b]\fR.
.PP
The slope of \f(CW\*(C`smoothstep(a,b,a)\*(C'\fR and  \f(CW\*(C`smoothstep(a,b,b)\*(C'\fR is zero.
.PP
For vectors, the returned vector contains the smooth interpolation of each element of the vector \fIx\fR.
.SH "REFERENCE IMPLEMENTATION"
.IX Header "REFERENCE IMPLEMENTATION"
\&\fBsmoothstep\fR for \fBfloat\fR scalars could be implemented this way:
.PP
.Vb 5
\&  float smoothstep(float a, float b, float x)
\&  {
\&      float t = saturate((x \- a)/(b \- a));
\&      return t*t*(3.0 \- (2.0*t));
\&  }
.Ve
.SH "PROFILE SUPPORT"
.IX Header "PROFILE SUPPORT"
\&\fBsmoothstep\fR is supported in all profiles except fp20.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
clamp, saturate, step
