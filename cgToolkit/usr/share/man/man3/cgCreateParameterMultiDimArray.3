.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "cgCreateParameterMultiDimArray 3"
.TH cgCreateParameterMultiDimArray 3 "Cg Toolkit 3.0" "perl v5.10.0" "Cg Core Runtime API"
.if n .ad l
.nh
.SH "NAME"
\&\fBcgCreateParameterMultiDimArray\fR \- creates a multi-dimensional parameter array
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <Cg/cg.h>
\&
\&  CGparameter cgCreateParameterMultiDimArray( CGcontext context,
\&                                              CGtype type,
\&                                              int dim, 
\&                                              const int * lengths );
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "context" 8
.IX Item "context"
The context to which the new parameter will be added.
.IP "type" 8
.IX Item "type"
The type of the new parameter.
.IP "dim" 8
.IX Item "dim"
The dimension of the multi-dimensional array.
.IP "lengths" 8
.IX Item "lengths"
An array of length values, one for each dimension of the array to be created.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Returns the handle to the new parameter array.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcgCreateParameterMultiDimArray\fR creates context level shared 
multi-dimensional parameter arrays.  
These parameters are primarily used by connecting them to one or more 
program parameter arrays with cgConnectParameter.
.PP
\&\fBcgCreateParameterMultiDimArray\fR works similarly to 
cgCreateParameterArray.  Instead
of taking a single length parameter it takes an array of lengths, one
per dimension.  The dimension of the array is defined by the \fBdim\fR 
parameter.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  /* Creates a three dimensional float array similar to */
\&  /* the C declaration :  float param[5][3][4]; */
\&
\&  int lengths[] = { 5, 3, 4 }; 
\&  CGcontext context = cgCreateContext();
\&  CGparameter param = cgCreateParameterMultiDimArray(context, CG_FLOAT,
\&                                                     3, lengths);
.Ve
.SH "ERRORS"
.IX Header "ERRORS"
\&\fB\s-1CG_INVALID_CONTEXT_HANDLE_ERROR\s0\fR is generated if \fBcontext\fR is not a valid context.
.PP
\&\fB\s-1CG_INVALID_VALUE_TYPE_ERROR\s0\fR is generated if \fBtype\fR is invalid.
.SH "HISTORY"
.IX Header "HISTORY"
\&\fBcgCreateParameterMultiDimArray\fR was introduced in Cg 1.2.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cgCreateParameter,
cgCreateParameterArray,
cgDestroyParameter,
cgConnectParameter
