.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "cgGLGetLatestProfile 3"
.TH cgGLGetLatestProfile 3 "Cg Toolkit 3.0" "perl v5.10.0" "Cg OpenGL Runtime API"
.if n .ad l
.nh
.SH "NAME"
\&\fBcgGLGetLatestProfile\fR \- get the latest profile for a profile class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <Cg/cgGL.h>
\&
\&  CGprofile cgGLGetLatestProfile( CGGLenum profileClass );
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "profileClass" 8
.IX Item "profileClass"
The class of profile that will be returned.  Must be one of the following :
.RS 8
.IP "\(bu" 4
\&\fB\s-1CG_GL_VERTEX\s0\fR
.IP "\(bu" 4
\&\fB\s-1CG_GL_GEOMETRY\s0\fR
.IP "\(bu" 4
\&\fB\s-1CG_GL_FRAGMENT\s0\fR
.IP "\(bu" 4
\&\fB\s-1CG_GL_TESSELLATION_CONTROL\s0\fR
.IP "\(bu" 4
\&\fB\s-1CG_GL_TESSELLATION_EVALUATION\s0\fR
.RE
.RS 8
.RE
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Returns a profile enumerant for the latest profile of the given class.
.PP
Returns \fB\s-1CG_PROFILE_UNKNOWN\s0\fR if no appropriate profile is available or an error occurs.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcgGLGetLatestProfile\fR returns the best available profile of a given class.
The OpenGL extensions are checked to determine the best profile which
is supported by the current \s-1GPU\s0, driver, and cgGL library combination.
.PP
\&\fBprofileClass\fR may be one of the following enumerants :
.IP "\(bu" 4
\&\fB\s-1CG_GL_VERTEX\s0\fR
.Sp
The latest available vertex profile will be returned.
.IP "\(bu" 4
\&\fB\s-1CG_GL_GEOMETRY\s0\fR
.Sp
The latest available geometry profile will be returned.
.IP "\(bu" 4
\&\fB\s-1CG_GL_FRAGMENT\s0\fR
.Sp
The latest available fragment profile will be returned.
.IP "\(bu" 4
\&\fB\s-1CG_GL_TESSELLATION_CONTROL\s0\fR
.Sp
The latest available tessellation control profile will be returned.
.IP "\(bu" 4
\&\fB\s-1CG_GL_TESSELLATION_EVALUATION\s0\fR
.Sp
The latest available tessellation evaluation profile will be returned.
.PP
\&\fBcgGLGetLatestProfile\fR can be used in conjuction with
cgCreateProgram to ensure that more optimal profiles are
used as they are made available, even though they might not have been available
at compile time or with a different version of the runtime.
.PP
Starting in Cg 2.2, certain environment variables can \fIoverride\fR the
value returned by \fBcgGLGetLatestProfile\fR:
.PP
If \fBcgGLGetLatestProfile\fR is called with \fBprofileClass\fR
being \fB\s-1CG_GL_VERTEX\s0\fR and an environment variable named
\&\f(CW\*(C`CGGL_LATEST_VERTEX_PROFILE\*(C'\fR is set in the application's environment to
a string that cgGetProfile translates to a valid profile
(meaning not \f(CW\*(C`CG_PROFILE_UNKNOWN\*(C'\fR), the \fBCGprofile\fR value returned by
cgGetProfile is returned by \fBcgGLGetLatestProfile\fR.
.PP
If \fBcgGLGetLatestProfile\fR is called with \fBprofileClass\fR
being \fB\s-1CG_GL_GEOMETRY\s0\fR and an environment variable named
\&\f(CW\*(C`CGGL_LATEST_GEOMETRY_PROFILE\*(C'\fR is set in the application's environment to
a string that cgGetProfile translates to a valid profile
(meaning not \f(CW\*(C`CG_PROFILE_UNKNOWN\*(C'\fR), the \fBCGprofile\fR value returned by
cgGetProfile is returned by \fBcgGLGetLatestProfile\fR.
.PP
If \fBcgGLGetLatestProfile\fR is called with \fBprofileClass\fR
being \fB\s-1CG_GL_FRAGMENT\s0\fR and an environment variable named
\&\f(CW\*(C`CGGL_LATEST_FRAGMENT_PROFILE\*(C'\fR is set in the application's environment to
a string that cgGetProfile translates to a valid profile
(meaning not \f(CW\*(C`CG_PROFILE_UNKNOWN\*(C'\fR), the \fBCGprofile\fR value returned by
cgGetProfile is returned by \fBcgGLGetLatestProfile\fR.
.PP
If \fBcgGLGetLatestProfile\fR is called with \fBprofileClass\fR
being \fB\s-1CG_GL_TESSELLATION_CONTROL\s0\fR and an environment variable named
\&\f(CW\*(C`CGGL_LATEST_TESSELLATION_CONTROL_PROFILE\*(C'\fR is set in the application's environment to
a string that cgGetProfile translates to a valid profile
(meaning not \f(CW\*(C`CG_PROFILE_UNKNOWN\*(C'\fR), the \fBCGprofile\fR value returned by
cgGetProfile is returned by \fBcgGLGetLatestProfile\fR.
.PP
If \fBcgGLGetLatestProfile\fR is called with \fBprofileClass\fR
being \fB\s-1CG_GL_TESSELLATION_EVALUATION\s0\fR and an environment variable named
\&\f(CW\*(C`CGGL_LATEST_TESSELLATION_EVALUATION_PROFILE\*(C'\fR is set in the application's environment to
a string that cgGetProfile translates to a valid profile
(meaning not \f(CW\*(C`CG_PROFILE_UNKNOWN\*(C'\fR), the \fBCGprofile\fR value returned by
cgGetProfile is returned by \fBcgGLGetLatestProfile\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 11
\&  /* Output information about available profiles */
\&  printf("vertex profile:   %s\en",
\&         cgGetProfileString(cgGLGetLatestProfile(CG_GL_VERTEX)));
\&  printf("geometry profile: %s\en",
\&         cgGetProfileString(cgGLGetLatestProfile(CG_GL_GEOMETRY)));
\&  printf("fragment profile: %s\en",
\&         cgGetProfileString(cgGLGetLatestProfile(CG_GL_FRAGMENT)));
\&  printf("tessellation control profile: %s\en",
\&         cgGetProfileString(cgGLGetLatestProfile(CG_GL_TESSELLATION_CONTROL)));
\&  printf("tessellation evalutation profile: %s\en",
\&         cgGetProfileString(cgGLGetLatestProfile(CG_GL_TESSELLATION_EVALUATION)));
.Ve
.SH "ERRORS"
.IX Header "ERRORS"
\&\fB\s-1CG_INVALID_ENUMERANT_ERROR\s0\fR is generated if \fBprofileClass\fR is not
\&\fB\s-1CG_GL_VERTEX\s0\fR, \fB\s-1CG_GL_GEOMETRY\s0\fR, \fB\s-1CG_GL_FRAGMENT\s0\fR,
\&\fB\s-1CG_GL_TESSELLATION_CONTROL\s0\fR, or \fB\s-1CG_GL_TESSELLATION_EVALUATION\s0\fR.
.SH "HISTORY"
.IX Header "HISTORY"
\&\fBcgGLGetLatestProfile\fR was introduced in Cg 1.1.
.PP
\&\fB\s-1CG_GL_GEOMETRY\s0\fR support was introduced in Cg 2.0.
.PP
\&\fB\s-1CG_GL_TESSELLATION_CONTROL\s0\fR and \fB\s-1CG_GL_TESSELLATION_EVALUATION\s0\fR support was introduced in Cg 3.0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cgGLSetOptimalOptions,
cgCreateProgram
