.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "cgD3D10SetDevice 3"
.TH cgD3D10SetDevice 3 "Cg Toolkit 3.0" "perl v5.10.0" "Cg Direct3D10 Runtime API"
.if n .ad l
.nh
.SH "NAME"
\&\fBcgD3D10SetDevice\fR \- set the D3D device
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <Cg/cgD3D10.h>
\&
\&  HRESULT cgD3D10SetDevice( CGcontext context,
\&                            ID3D10Device * device );
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "context" 8
.IX Item "context"
The context in which to set the current device.
.IP "device" 8
.IX Item "device"
Pointer to an \fBID3D10Device\fR interface that the expanded interface will
use for any D3D\-specific routine it may call. This parameter can be \fB\s-1NULL\s0\fR
to free all D3D resources used by the expanded interface and remove its
reference to the D3D device.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Returns \fBD3D_OK\fR if the function succeeds.
.PP
Returns the D3D failure code if the function fails due to a D3D call.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcgD3D10SetDevice\fR informs the expanded interface of the new D3D device.
This will destroy any D3D resources for programs previously loaded with
cgD3D10LoadProgram and use the new D3D device to recreate them. The
expanded interface will increment the reference count to the D3D device,
so this function must eventually be called with \fB\s-1NULL\s0\fR to release that
reference so D3D can be properly shut down.
.PP
If \fBdevice\fR is \fB\s-1NULL\s0\fR, all D3D resources for programs previously loaded
with cgD3D10LoadProgram are destroyed. However, these
programs are still considered managed by the expanded interface, so if a
new D3D device is set later these programs will be recreated using the new
D3D device.
.PP
If a new device is being set, all D3D resources for programs previously
loaded with cgD3D10LoadProgram are rebuilt using the new
device. All shadowed parameters for these programs are maintained across D3D
device changes except texture parameters. Since textures in D3D are bound to
a particular D3D device, these resources cannot be saved across device changes.
When these textures are recreated for the new D3D device, they must be re-bound
to the sampler parameter.
.PP
Note that calling \fBcgD3D10SetDevice(\s-1NULL\s0)\fR does not destroy any core runtime
resources (\fBCGprograms\fR, \fBCGparameters\fR, etc.) used by the expanded interface.
These must be destroyed seperately using cgDestroyProgram
and cgDestroyContext.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 3
\&  // pDev is an ID3D10Device interface initialized elsewhere
\&  ...
\&  cgD3D10SetDevice(pDev);
.Ve
.SH "ERRORS"
.IX Header "ERRORS"
\&\fBcgD3D10Failed\fR is generated if a D3D function returns an error.
.SH "HISTORY"
.IX Header "HISTORY"
\&\fBcgD3D10SetDevice\fR was introduced in Cg 2.1.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cgD3D10GetDevice,
cgDestroyProgram,
cgDestroyContext,
cgD3D10LoadProgram
