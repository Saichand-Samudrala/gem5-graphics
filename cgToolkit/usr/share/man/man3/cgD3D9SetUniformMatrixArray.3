.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.IX Title "cgD3D9SetUniformMatrixArray 3"
.TH cgD3D9SetUniformMatrixArray 3 "Cg Toolkit 3.0" "perl v5.10.0" "Cg Direct3D9 Runtime API"
.if n .ad l
.nh
.SH "NAME"
\&\fBcgD3D9SetUniformMatrixArray\fR \- set the elements for an array of uniform matrix parameters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <Cg/cgD3D9.h>
\&
\&  HRESULT cgD3D9SetUniformMatrixArray( CGparameter param,
\&                                       DWORD offset,
\&                                       DWORD numItems,
\&                                       const D3DMATRIX * matrices );
.Ve
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.IP "param" 8
.IX Item "param"
The parameter whose array elements are to be set. It must be a uniform
matrix parameter.
.IP "offset" 8
.IX Item "offset"
The offset at which to start setting array elements.
.IP "numItems" 8
.IX Item "numItems"
The number of array elements to set.
.IP "matrices" 8
.IX Item "matrices"
An array of matrices to set for \fBparam\fR. The upper-left portion of
each matrix is extracted to fit the size of the input parameter.
\&\fBnumItems\fR matrices are expected to be passed to the function.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Returns \fBD3D_OK\fR if the function succeeds.
.PP
Returns the D3D failure code if the function fails due to a D3D call.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcgD3D9SetUniformMatrixArray\fR sets the elements for an array of uniform
matrix parameters.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 10
\&  // matrixParam is a CGparameter handle of type float3x2
\&  // arrayParam is a CGparameter handle of type float4x4[4]
\&  ...
\&  // intialize the data for each parameter
\&  D3DXMATRIX matTexTransform(
\&      0.5f,0,      0,0,
\&      0   ,0.5f,   0,0,
\&      0.5f,0.5f,   0,0,
\&      0   ,0,      0,0
\&  );
\&  D3DXMATRIX matRot[2];
\&  D3DXMatrixRotationAxis(&matRot[0], &D3DXVECTOR3(0,0,1), D3DX_PI*0.5f);
\&  D3DXMatrixRotationAxis(&matRot[1], &D3DXVECTOR3(0,1,0), D3DX_PI*0.5f);
\&  ...
\&  // only use the upper\-left portion. 
\&  // non\-arrays can be set, but only when offset=0 and numItems=1.
\&  cgD3D9SetUniformArray(matrixParam, &matTexTransform, 0, 1);
\&  // set the 3rd and 4th elements of the array
\&  cgD3D9SetUniformArray(arrayParam, matRot, 2, 2);
.Ve
.SH "ERRORS"
.IX Header "ERRORS"
\&\fBcgD3D9Failed\fR is generated if a D3D function returns an error.
.PP
\&\fB\s-1CGD3D9ERR_NODEVICE\s0\fR is returned if a required D3D device is \fB\s-1NULL\s0\fR.  This
usually occurs when an expanded interface routine is called but a D3D device
has not been set with cgD3D9SetDevice.
.PP
\&\fB\s-1CGD3D9ERR_NOTLOADED\s0\fR is returned if \fBprogram\fR was not loaded with the
cgD3D9LoadProgram.
.PP
\&\fB\s-1CGD3D9ERR_NOTMATRIX\s0\fR is returned if \fBparam\fR is not a matrix.
.PP
\&\fB\s-1CGD3D9ERR_NOTUNIFORM\s0\fR is returned if \fBparam\fR is not a uniform parameter.
.PP
\&\fB\s-1CGD3D9ERR_NULLVALUE\s0\fR is returned if \fBmatrices\fR is \fB\s-1NULL\s0\fR.
.PP
\&\fB\s-1CGD3D9ERR_OUTOFRANGE\s0\fR is returned if \fBoffset\fR plus \fBnumItems\fR is
out of the range of \fBparam\fR.
.PP
\&\fB\s-1CGD3D9ERR_INVALIDPARAM\s0\fR is returned if the parameter fails to 
set for any other reason.
.SH "HISTORY"
.IX Header "HISTORY"
\&\fBcgD3D9SetUniformMatrixArray\fR was introduced in Cg 1.1.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
cgD3D9SetUniform,
cgD3D9SetUniformArray,
cgD3D9SetUniformMatrix,
cgD3D9TypeToSize
